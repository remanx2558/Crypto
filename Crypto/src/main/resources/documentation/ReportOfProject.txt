  1.  //__repr__==reper method to show structure of object : not required
  2.can improve hash code : unique o/p for unique i/p: Hashing.sha256().hashString(String.valueOf(str), StandardCharsets.UTF_8).toString()
  3.can sort objects in hashListObject(arr):
  4.Difficulty ==6 means that generated hash must have 6 zeros in front of it: so generate many hash for same string and then pick with 6 zeros in front
  5.nonce ==difficulty: increase nonce value till it reaches difficulty while generating corresponding hash value a/c to current nonce
  6. nonce goes 0..1..2 ... and goes on inceasing till a hash get generated which have same number of zeros as difficulty
  7. hash of (Block Data+ nonce): keep adjusting nonce
  8.sha256 gives data in hexadecimal---> convert in binary
  9. other can prove the hash is valid if have: nonce+blockdata+algo used to convert(sha256)
  10.Mining rate is more then decrease difficulty so that avg_rage of mining remain same and vice-versa
  11. In PUB-sub : Publisher publish message on a channel and Subscriber listen to a channel both in a network:
  12. Pubsub network reduces the overhead of keeping track of sockets addresses:In this implementation real time socket connections are open between servers and each server has to maintain a list of all Piers.
  13.It has made a real time socket connection with whenever a message broadcast needs to occur between all the peers.
  14.No need to send a direct message to every single peer that has kept track of in the list.
  15.This is a huge amount of work but if this network is sending the same message to all the sockets it doesn't need a targeting messaging capability that is this powerful.
  16.When the network just needs to broadcast something to all the nodes in general :src/main/resources/PubSub Tech.png
  17.Create a Channel called "Block" which is connection of all blockchain nodes
  18.When an individual block chain in the network gets new data in its local chain list it will then publish the block data in the channel
  19.This allows the other nodes to receive that information since they're all subscribed to the same block channel.
  20.Therefore they'll pick up that message of the new block that hit the block and update their own local blocking instances.
  21. make differnt instances of intellij to test blockchain pubsub : Run --->Run configuration --> Add application --> Add {MainClass: Main class of application which is App.java, EnvironmentVariable:server.port(key)===8004(value) }

  ///************************Problem 1: server Instancces are created which cannot interact with each other :Till lecture 63 *************************************

  22. private key allows the individual to generate unique digital signatures for their transactions.
  23.Blockchain ----> Block -----> Transaction
  24.Input1: Initial (datails+Balance+etc) ::::::::::::::;Output1:transfered Amount and datails:::::::::OutPut2:Remaining Amount Datails after sending
  24.Therefore every individual through their wallet can calculate their balance by looking at the history of transactions in the blocking
  25.Public verify hash and it fails if :1)hash tempered after encryption or 2) used false private key to encrypt data

  ///************************Problem 2: lecture 78-77-79 is quite complex do that part again  *************************************


  26.The transaction Pool transaction Pool is a data structure which will collect the transactions that are created by wallet in the network.
  27.The main thing is that it needs support 3 behaviors:
        1) it collects a unique set of transaction objects
        2) it can update already existing stored transactions when a change has been resubmitted by a wallet
        3) that it can rewrite multiple transactions meaning it can either replace a collection with an entirely new set or it can clear the pool of a handful or all of his transactions now.
  28.every note in the network is going to have its own instance of the transaction pool like the blockChain
  29.Everyone has their own running version transaction pool and the key is making sure that all transaction pools stay synchronized
  30.when one node creates a new transaction( or updates an existing one). The transaction will have to be broadcasted to the entire network and based on its transaction I.D. the transaction will either be added to each transaction pool if it's new( or it will be updated in each pool accordingly If a transaction with that I.D. already exists in it)
  41.ultimately the transaction pool is a necessary object because it enables miners to get an accurate list of recent transactions in order to include them within  a new block.
  42.when to add a new block to the block chain a miner will use the transactions within the transaction pool as the data for a new block to mine.
